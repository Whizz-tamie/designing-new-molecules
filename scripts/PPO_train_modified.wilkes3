#!/bin/bash
#!
#! Example SLURM job script for Wilkes3 (AMD EPYC 7763, ConnectX-6, A100)
#! Last updated: Fri 30 Jul 11:07:58 BST 2021
#!

#!#############################################################
#!#### Modify the options in this section as appropriate ######
#!#############################################################

#! sbatch directives begin here ###############################
#! Name of the job:
#SBATCH -J Maskable_PPO_run1
#! Which project should be charged (NB Wilkes2 projects end in '-GPU'):
#SBATCH -A MLMI-GTJ21-SL2-GPU
#! How many whole nodes should be allocated?
#SBATCH --nodes=1
#! How many (MPI) tasks will there be in total?
#! Note probably this should not exceed the total number of GPUs in use.
#SBATCH --ntasks=1
#! Specify the number of GPUs per node (between 1 and 4; must be 4 if nodes>1).
#! Note that the job submission script will enforce no more than 32 cpus per GPU.
#SBATCH --gres=gpu:1
#! How many CPUs per task?
#SBATCH --cpus-per-task=1
#! How much wallclock time will be required?
#SBATCH --time=15:00:00
#! What types of email messages do you wish to receive?
#SBATCH --mail-type=NONE
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
#SBATCH --no-requeue

#! Do not change:
#SBATCH -p ampere

#! sbatch directives end here (put any additional directives above this line)

#! Notes:
#! Charging is determined by GPU number*walltime. 

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel8/default-amp              # REQUIRED - loads the basic environment
module load cuda/12.1 intel/mkl/2020.4

source /home/${USER}/.bashrc
source /rds/user/gtj21/hpc-work/miniconda3/etc/profile.d/conda.sh
conda activate /rds/user/gtj21/hpc-work/designing-new-molecules/molvenv
#! Insert additional module load commands after this line if needed:

#! Define experiment name:
EXPERIMENT_NAME=Masked_ExtendedObs_PPO_v1

#! Define wandb run id:
RUN_ID=sb3_ppo_run.v6

#! Run options for the application:
options="--experiment_name \"$EXPERIMENT_NAME\" --run_id \"$RUN_ID\""

#! Work directory (i.e. where the job will run):
workdir="/rds/user/gtj21/hpc-work/designing-new-molecules"  # $SLURM_SUBMIT_DIR: The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 76:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]

#! The following variables define a sensible pinning strategy for Intel MPI tasks -
#! this should be suitable for both pure MPI and hybrid MPI/OpenMP jobs:
export I_MPI_PIN_DOMAIN=omp:compact # Domains are $OMP_NUM_THREADS cores in size
export I_MPI_PIN_ORDER=scatter # Adjacent domains have minimal sharing of caches/sockets
#! Notes:
#! 1. These variables influence Intel MPI only.
#! 2. Domains are non-overlapping sets of cores which map 1-1 to MPI tasks.
#! 3. I_MPI_PIN_PROCESSOR_LIST is ignored if I_MPI_PIN_DOMAIN is set.
#! 4. If MPI tasks perform better when sharing caches/sockets, try I_MPI_PIN_ORDER=compact.

#! Uncomment one choice for CMD below (add mpirun/mpiexec options if necessary):

#! Choose this for a MPI code (possibly using OpenMP) using Intel MPI.
#CMD="mpirun -ppn $mpi_tasks_per_node -np $np $application $options"

#! Choose this for a pure shared-memory OpenMP parallel program on a single node:
#! (OMP_NUM_THREADS threads will be created):
#! CMD="$application $options"

#! Choose this for a MPI code (possibly using OpenMP) using OpenMPI:
#CMD="mpirun -npernode $mpi_tasks_per_node -np $np $application $options"

###############################################################
### You should not have to change anything below this line ####
###############################################################

# Define the path for the temporary worktree
temp_worktree="/rds/user/gtj21/hpc-work/designing-new-molecules-worktree-$SLURM_JOB_ID"

# Trap to ensure cleanup on termination
trap 'git worktree remove $temp_worktree' EXIT

# Create the temporary worktree to isolate the job
COMMIT_HASH=936ce62609f035b5f803ec9acb8486b4e5bbb3bb
git worktree add $temp_worktree $COMMIT_HASH

# Change to the worktree directory
cd $temp_worktree || { echo "Failed to change directory to worktree"; exit 1; }
echo -e "Changed directory to `pwd`.\n"

# Log the current Git commit hash and commit message being used
echo "Full Git commit hash:"
git rev-parse HEAD
echo "Short Git commit and message:"
git log -1 --pretty=format:"%h - %s"

# Create log directory
mkdir -p "$workdir/src/models/ppo/logs/slurm"
JOBNAME=$SLURM_JOB_NAME
JOBID=$SLURM_JOB_ID
LOGFILE_STDOUT="$workdir/src/models/ppo/logs/slurm/$SLURM_JOB_NAME.$JOBID.out"
LOGFILE_STDERR="$workdir/src/models/ppo/logs/slurm/$SLURM_JOB_NAME.$JOBID.err"

# Explicitly set the application path relative to the worktree
application="$temp_worktree/src/models/ppo/train/maskable_ppo.py"

CMD="python3 -u $application $options > $LOGFILE_STDOUT 2> $LOGFILE_STDERR"

echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"

if [ "$SLURM_JOB_NODELIST" ]; then
        export NODEFILE=`generate_pbs_nodefile`
        cat $NODEFILE | uniq > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================"
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
fi

echo -e "\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)"

echo -e "\nExecuting command:\n==================\n$CMD\n"

eval $CMD

# Explicit clean-up (in case the trap wasn't triggered)
git worktree remove $temp_worktree
